-- =========================================
-- 1. PROFILES (linked to Supabase Auth)
-- =========================================
CREATE TABLE profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  name text,
  location text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Function to auto-update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for profiles
CREATE TRIGGER update_profiles_updated_at
BEFORE UPDATE ON profiles
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =========================================
-- 2. SKILLS
-- =========================================
CREATE TABLE skills (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text UNIQUE NOT NULL,
  category text
);


-- =========================================
-- 3. USER_SKILLS (many-to-many: teach/learn)
-- =========================================
CREATE TABLE user_skills (
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  skill_id uuid REFERENCES skills(id) ON DELETE CASCADE,
  type text NOT NULL CHECK (type IN ('teach', 'learn')),
  PRIMARY KEY (user_id, skill_id, type)
);


-- =========================================
-- 4. CHATS
-- =========================================
CREATE TABLE chats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT now()
);


-- =========================================
-- 5. CHAT_MEMBERS (users in chats)
-- =========================================
CREATE TABLE chat_members (
  chat_id uuid REFERENCES chats(id) ON DELETE CASCADE,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  PRIMARY KEY (chat_id, user_id)
);


-- =========================================
-- 6. MESSAGES
-- =========================================
CREATE TABLE messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  chat_id uuid REFERENCES chats(id) ON DELETE CASCADE,
  sender_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  text text NOT NULL,
  sent_at timestamp with time zone DEFAULT now(),
  is_read boolean DEFAULT FALSE
);


-- =========================================
-- 7. REVIEWS
-- =========================================
CREATE TABLE reviews (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  reviewer_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  reviewed_user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment text,
  created_at timestamp with time zone DEFAULT now()
);


-- =========================================
-- 8. ROW LEVEL SECURITY (RLS) POLICIES
-- =========================================

-- Enable RLS on all user-facing tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;

-- PROFILES
CREATE POLICY "Users can view all profiles"
ON profiles FOR SELECT
USING (true);

CREATE POLICY "Users can update their own profile"
ON profiles FOR UPDATE
USING (auth.uid() = id);

-- USER_SKILLS
CREATE POLICY "Users can view all skills"
ON user_skills FOR SELECT
USING (true);

CREATE POLICY "Users can manage their own skills"
ON user_skills FOR ALL
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- CHATS
CREATE POLICY "Users can view chats they belong to"
ON chats FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM chat_members
    WHERE chat_members.chat_id = chats.id
      AND chat_members.user_id = auth.uid()
  )
);

CREATE POLICY "Users can create chats"
ON chats FOR INSERT
WITH CHECK (true);

-- CHAT_MEMBERS
CREATE POLICY "Users can view their own chat memberships"
ON chat_members FOR SELECT
USING (user_id = auth.uid());

CREATE POLICY "Users can join chats (self only)"
ON chat_members FOR INSERT
WITH CHECK (user_id = auth.uid());

-- MESSAGES
CREATE POLICY "Users can read messages in their chats"
ON messages FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM chat_members
    WHERE chat_members.chat_id = messages.chat_id
      AND chat_members.user_id = auth.uid()
  )
);

CREATE POLICY "Users can send messages in their chats"
ON messages FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM chat_members
    WHERE chat_members.chat_id = messages.chat_id
      AND chat_members.user_id = auth.uid()
  )
);

-- REVIEWS
CREATE POLICY "Users can view all reviews"
ON reviews FOR SELECT
USING (true);

CREATE POLICY "Users can create reviews"
ON reviews FOR INSERT
WITH CHECK (reviewer_id = auth.uid());

CREATE POLICY "Users can update or delete their own reviews"
ON reviews FOR ALL
USING (reviewer_id = auth.uid());

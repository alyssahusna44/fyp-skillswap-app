-- ========================
-- EMAIL RESTRICTION (@s.unikl.edu.my)
-- ========================

CREATE OR REPLACE FUNCTION restrict_unikl_emails()
RETURNS trigger AS $$
BEGIN
  IF NEW.email NOT LIKE '%@s.unikl.edu.my' THEN
    RAISE EXCEPTION 'Only UniKL student emails (@s.unikl.edu.my) are allowed.';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS check_unikl_email ON auth.users;

CREATE TRIGGER check_unikl_email
BEFORE INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION restrict_unikl_emails();

-- ========================
-- RLS + POLICIES
-- ========================

-- Enable RLS
ALTER TABLE student ENABLE ROW LEVEL SECURITY;
ALTER TABLE tutor_profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE tutor_subject ENABLE ROW LEVEL SECURITY;
ALTER TABLE tutor_review ENABLE ROW LEVEL SECURITY;
ALTER TABLE tutor_session ENABLE ROW LEVEL SECURITY;

-- Students
CREATE POLICY "Students can view all"
ON student FOR SELECT USING (true);

CREATE POLICY "Students can update own profile"
ON student FOR UPDATE USING (auth.uid() = student_id);

-- Tutor Profile
CREATE POLICY "Anyone can view tutors"
ON tutor_profile FOR SELECT USING (true);

CREATE POLICY "Tutor can update own profile"
ON tutor_profile FOR UPDATE USING (auth.uid() = tutor_id);

-- Tutor Subjects
CREATE POLICY "Anyone can view tutor subjects"
ON tutor_subject FOR SELECT USING (true);

CREATE POLICY "Tutor can manage own subjects"
ON tutor_subject FOR ALL
USING (auth.uid() = tutor_id)
WITH CHECK (auth.uid() = tutor_id);

-- Tutor Reviews
CREATE POLICY "Anyone can view reviews"
ON tutor_review FOR SELECT USING (true);

CREATE POLICY "Students can insert own reviews"
ON tutor_review FOR INSERT
USING (auth.uid() = student_id)
WITH CHECK (auth.uid() = student_id);

-- Tutor Sessions
CREATE POLICY "Participants can view own sessions"
ON tutor_session FOR SELECT
USING (auth.uid() = tutor_id OR auth.uid() = student_id);

CREATE POLICY "Participants can insert sessions"
ON tutor_session FOR INSERT
USING (auth.uid() = tutor_id OR auth.uid() = student_id)
WITH CHECK (auth.uid() = tutor_id OR auth.uid() = student_id);

CREATE POLICY "Participants can update sessions"
ON tutor_session FOR UPDATE
USING (auth.uid() = tutor_id OR auth.uid() = student_id)
WITH CHECK (auth.uid() = tutor_id OR auth.uid() = student_id);
